# -*- coding: utf-8 -*-
"""warmup assgn_2011050.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bCFC1wJjJEI4kJjb3NzKDU5B0MKOfrjm
"""

#QUES1
#(((((((A)))))))
#to calculate sum of first N odd numbers
N= int(input("Enter the value of N:"))
sum=0
for num in range (0,2*N+1): 
  #to calculate sum of first N odd numbers, num should run from starting point 0 to the number 2N+1
  if num%2 != 0: #for num only being the odd number
    sum = sum +num #rescursive sum
print("The Sum of first {0} odd numbers is {1}".format(N,sum))

#(((((B)))))
#to calculate factorial of N
fact=1
if N<0:
  print("Factorial does not exist for negative number")
elif N==0:
  print("Factorial of 0 is 1")
else:
  for num in range(1,N+1):
    fact=fact*num #multiplication of each next numbers to the result
  print("The factorial of {0} is {1}".format(N,fact))

#QUES2
a1=1 #starting element in AP
d=1.5 #common difference in AP
r=0.5 #common ratio in GP

#(((((((A)))))))
#to calculate sum of first N terms of AP[a+(a+d)+(a+2d)+....]
NAP= int(input("Enter the value of N for AP:"))
sumAP=0
num=0
while num<NAP:
  sumAP=sumAP+a1
  a1=a1+d
  num=num+1
print("The sum of first {0} terms of the AP is {1}".format(NAP,sumAP))

#(((((((B)))))))
#to calculate sum of first N terms of GP(a+ar+ar^2+....)
NGP= int(input("Enter the value of N for GP:"))
a2=1
sumGP=0
num=0
while num<NGP:
  sumGP=sumGP+a2
  a2=a2*r
  num=num+1
print("The sum of first {0} terms of the GP is {1}".format(NGP,sumGP))

#(((((((C)))))))
#to calculate sum of first N terms of HP[(1/a)+(1/a+d)+(1/a+2d)+.....)
NHP= int(input("Enter the value of N for HP:"))
a3=1
sumHP=0
num=0
while num<NHP:
  sumHP=float(sumHP+1/a3)
  a3=float(a3+d)
  num=num+1
print("The sum of first {0} terms of the HP is {1}".format(NHP,sumHP))

#QUES3
#I have taken n to be 100 and 10 to viasualise convergence of series initially and also for larger values of n 
import matplotlib.pyplot as plt

x100=[]
y100=[]
n=100 #for large value of n
sum=0
for i in range(1,n+1):
  sum=sum+((-1)**(i+1))/2**i
  x100.append(i)#defining n points in x
  y100.append(sum) #defining corresponding sum in y 
print("The sum of the given series for some n~100 converges to {0:.4f}".format(sum)) #upto 4 decimal places

plt.subplot(1,2,1)
plt.plot(x100,y100) #plotting
plt.xlabel("n")
plt.ylabel("sum")
plt.title("Plot of sum vs n~100")

x10=[]
y10=[]
n=10#for small value of n to visualise the trend nicely
sum=0
for i in range(1,n+1):
  sum=sum+((-1)**(i+1))/2**i
  x10.append(i)#defining n points in x
  y10.append(sum) #defining corresponding sum in y 
print("The sum of the given series for some n~10 converges to {0:.4f}".format(sum)) #upto 4 decimal places

plt.subplot(1,2,2)
plt.plot(x10,y10) #plotting
plt.xlabel("n")
plt.ylabel("sum")
plt.title("Plot of sum vs n~10")

#QUES4
A=[[2,-3,1.4],[2.5,1,-2],[-0.8,0,3.1]]
B=[[0,-1,1],[1.5,0.5,-2],[3,0,-2]]
C=[[-2],[0.5],[1.5]]
D=[[1],[0],[-1]]

#(((((((A)))))))
#To calculate AB(matrix multiplication)
pr=[[0,0,0],[0,0,0],[0,0,0]]
def matrixAB():#defining structure of matrix
  for i in pr:
    for j in i:
      print(j, end="\t\t")
    print("\n")
  print("\n")

for i in range(len(A)): #iterating through rows of A
  for j in range (len(B[0])): #iterating through columns of B
    for k in range (len(B)): #ITERATING THROUGH ROWS OF B
      pr[i][j]= round(pr[i][j]+ A[i][k]*B[k][j],3) #OPERATION
      
print("The matrix AB is:\n")
matrixAB()

#(((((C)))))
#TO CALCULATE BC
BC=[[0],[0],[0]]
def matrixBC():#defining structure of matrix
  for i in BC:
    for j in i:
      print(j, end="\t\t")
    print("\n")
  print("\n")
for i in range(len(B)):#iterating through rows of B
  for j in range(len(C)):#iterating through C
    BC[i][0] =BC[i][0]+ B[i][j]*C[j][0]
print("The matrix BC is:\n")
matrixBC()

#(((((((B)))))))
#To calculate D.C
C=[-2,0.5,1.5]
D=[1,0,-1]
DP=0
for D,C in zip(D,C):
  DP=DP+D*C
print("The dot product D.C is", DP)

#QUES5
#WORKING THROUGH COMPLEX NUMBERS
c1=complex(3,-2)
c2=complex(1,2)
def myComplex():
#SUM
  sumc=c1+c2
  print("The sum of the given two complex numbers is:",sumc)
#PRODUCT
  productc=c1*c2
  print("The product of the given two complex numbers is:",productc)
#modulus
  mod_c1=((c1.real)**2 + (c1.imag)**2)**0.5
  mod_c2=((c2.real)**2 + (c2.imag)**2)**0.5
  print("The modulus of the complex number",c1," is ",mod_c1,
        "\nThe modulus of the complex number",c2,"is",mod_c2)
myComplex()